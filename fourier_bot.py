from datamodel import OrderDepth, UserId, TradingState, Order
from typing import List
import string
import statistics as stat
import numpy as np
import jsonpickle

class Trader:
    
    def run(self, state: TradingState):
        # try:
        # Only method required. It takes all buy and sell orders for all symbols as an input, and outputs a list of orders to be sent
        print("traderData: " + state.traderData)

        #current_kelp_ind = int(state.traderData) if state.traderData else -4
        previous_data = Persistence_Data(0,0) if not state.traderData else jsonpickle.decode(state.traderData)
        #previous_data = jsonpickle.decode(state.traderData) if state.traderData else Persistence_Data(0,0)

        current_kelp_ind = previous_data.current_kelp_ind
        result = {}
        for product in state.order_depths:
            order_depth: OrderDepth = state.order_depths[product]
            orders: List[Order] = []
            
            # limit is 50
            if product == 'KELP' and current_kelp_ind >= 50 and previous_data.trade_frequency_count == 100:     # change this
                # predict the future 5 index 
                kelp_price_future = self.fourier_cust(current_kelp_ind + 100)
                current_kelp_position = state.position[product] if product in state.position else 0
                buy_orders = order_depth.buy_orders
                sell_orders = order_depth.sell_orders

                print(f"Fourier pred: {kelp_price_future}, current_kelp_position: {current_kelp_position}")
                print(len(buy_orders), len(sell_orders))

                if buy_orders or sell_orders:
                    # median price
                    current_price = stat.median(list(buy_orders.keys()) + list(sell_orders.keys()))
                    print(f"current_price: {current_price}")

                    if current_price < kelp_price_future:
                        # we buy all
                        for sell_price in sell_orders:
                            amount = min(50 - current_kelp_position, abs(sell_orders[sell_price]))
                            orders.append(Order(product, sell_price, amount))
                            print(f"Buy {amount}--at {sell_price}")
                            current_kelp_position += amount
                    else:
                        # we sell all
                        for buy_price in buy_orders:
                            amount = min(current_kelp_position + 50, abs(buy_orders[buy_price]))
                            orders.append(Order(product, buy_price, - amount))
                            print(f"Sell {- amount}--at {buy_price}")
                            current_kelp_position -= amount
                previous_data.trade_frequency_count = -1
            result[product] = orders
        

        previous_data.trade_frequency_count += 1 if current_kelp_ind >= 50 else 0
        previous_data.current_kelp_ind += 1
        traderData = jsonpickle.encode(previous_data)
        #traderData = str(current_kelp_ind + 1)


        conversions = 1
        return result, conversions, traderData
        # except Exception as e:
        #     print(f"Error occurs: {e}")
        #     return {}, 1, ""

    def fourier_cust(self, x):
        return 2019.0520 + 3.1368 * np.cos(2 * np.pi * 0.0005 * x) + 2.2647 * np.sin(2 * np.pi * 0.0005 * x) + 1.9269 * np.cos(2 * np.pi * 0.0010 * x) + 1.4737 * np.sin(2 * np.pi * 0.0010 * x) + -1.1696 * np.cos(2 * np.pi * 0.0015 * x) + -0.4259 * np.sin(2 * np.pi * 0.0015 * x) + 0.4635 * np.cos(2 * np.pi * 0.0020 * x) + 0.5498 * np.sin(2 * np.pi * 0.0020 * x) + -0.4489 * np.cos(2 * np.pi * 0.0025 * x) + -0.1749 * np.sin(2 * np.pi * 0.0025 * x) + 0.1229 * np.cos(2 * np.pi * 0.0030 * x) + 0.1595 * np.sin(2 * np.pi * 0.0030 * x) + 0.3250 * np.cos(2 * np.pi * 0.0035 * x) + -0.0832 * np.sin(2 * np.pi * 0.0035 * x) + 0.0431 * np.cos(2 * np.pi * 0.0040 * x) + 0.3054 * np.sin(2 * np.pi * 0.0040 * x) + -0.0952 * np.cos(2 * np.pi * 0.0045 * x) + 0.5854 * np.sin(2 * np.pi * 0.0045 * x) + -0.2651 * np.cos(2 * np.pi * 0.0050 * x) + -0.1541 * np.sin(2 * np.pi * 0.0050 * x) + -0.0234 * np.cos(2 * np.pi * 0.0055 * x) + 0.2519 * np.sin(2 * np.pi * 0.0055 * x) + 0.4880 * np.cos(2 * np.pi * 0.0060 * x) + 0.3185 * np.sin(2 * np.pi * 0.0060 * x) + -0.1847 * np.cos(2 * np.pi * 0.0065 * x) + 0.4123 * np.sin(2 * np.pi * 0.0065 * x) + 0.2307 * np.cos(2 * np.pi * 0.0070 * x) + 0.0869 * np.sin(2 * np.pi * 0.0070 * x) + -0.0160 * np.cos(2 * np.pi * 0.0075 * x) + 0.0510 * np.sin(2 * np.pi * 0.0075 * x) + -0.1753 * np.cos(2 * np.pi * 0.0080 * x) + 0.0869 * np.sin(2 * np.pi * 0.0080 * x) + 0.3162 * np.cos(2 * np.pi * 0.0085 * x) + -0.0084 * np.sin(2 * np.pi * 0.0085 * x) + -0.0483 * np.cos(2 * np.pi * 0.0090 * x) + -0.2014 * np.sin(2 * np.pi * 0.0090 * x) + 0.3012 * np.cos(2 * np.pi * 0.0095 * x) + 0.1381 * np.sin(2 * np.pi * 0.0095 * x) + -0.1324 * np.cos(2 * np.pi * 0.0100 * x) + 0.0311 * np.sin(2 * np.pi * 0.0100 * x) + 0.1122 * np.cos(2 * np.pi * 0.0105 * x) + -0.1404 * np.sin(2 * np.pi * 0.0105 * x) + 0.1327 * np.cos(2 * np.pi * 0.0110 * x) + 0.1694 * np.sin(2 * np.pi * 0.0110 * x) + -0.0218 * np.cos(2 * np.pi * 0.0115 * x) + -0.1325 * np.sin(2 * np.pi * 0.0115 * x) + -0.0220 * np.cos(2 * np.pi * 0.0120 * x) + 0.2817 * np.sin(2 * np.pi * 0.0120 * x) + 0.0469 * np.cos(2 * np.pi * 0.0125 * x) + -0.0996 * np.sin(2 * np.pi * 0.0125 * x) + 0.1685 * np.cos(2 * np.pi * 0.0135 * x) + 0.0018 * np.sin(2 * np.pi * 0.0135 * x) + 0.1500 * np.cos(2 * np.pi * 0.0140 * x) + -0.1099 * np.sin(2 * np.pi * 0.0140 * x) + 0.0203 * np.cos(2 * np.pi * 0.0145 * x) + 0.0470 * np.sin(2 * np.pi * 0.0145 * x) + -0.0700 * np.cos(2 * np.pi * 0.0155 * x) + -0.0558 * np.sin(2 * np.pi * 0.0155 * x) + 0.0792 * np.cos(2 * np.pi * 0.0160 * x) + 0.0748 * np.sin(2 * np.pi * 0.0160 * x) + -0.1089 * np.cos(2 * np.pi * 0.0165 * x) + 0.0556 * np.sin(2 * np.pi * 0.0165 * x) + 0.0048 * np.cos(2 * np.pi * 0.0170 * x) + 0.0898 * np.sin(2 * np.pi * 0.0170 * x) + 0.0022 * np.cos(2 * np.pi * 0.0175 * x) + 0.1289 * np.sin(2 * np.pi * 0.0175 * x) + -0.1356 * np.cos(2 * np.pi * 0.0185 * x) + 0.0533 * np.sin(2 * np.pi * 0.0185 * x) + 0.0237 * np.cos(2 * np.pi * 0.0190 * x) + 0.0795 * np.sin(2 * np.pi * 0.0190 * x) + -0.1020 * np.cos(2 * np.pi * 0.0195 * x) + 0.0697 * np.sin(2 * np.pi * 0.0195 * x) + -0.0312 * np.cos(2 * np.pi * 0.0205 * x) + 0.0706 * np.sin(2 * np.pi * 0.0205 * x) + -0.0429 * np.cos(2 * np.pi * 0.0210 * x) + 0.0462 * np.sin(2 * np.pi * 0.0210 * x) + -0.0430 * np.cos(2 * np.pi * 0.0215 * x) + 0.0871 * np.sin(2 * np.pi * 0.0215 * x) + -0.0687 * np.cos(2 * np.pi * 0.0220 * x) + -0.0001 * np.sin(2 * np.pi * 0.0220 * x) + 0.0609 * np.cos(2 * np.pi * 0.0225 * x) + 0.0460 * np.sin(2 * np.pi * 0.0225 * x) + 0.0508 * np.cos(2 * np.pi * 0.0230 * x) + 0.0564 * np.sin(2 * np.pi * 0.0230 * x) + 0.0480 * np.cos(2 * np.pi * 0.0235 * x) + 0.1276 * np.sin(2 * np.pi * 0.0235 * x) + -0.0722 * np.cos(2 * np.pi * 0.0240 * x) + 0.0200 * np.sin(2 * np.pi * 0.0240 * x) + -0.0071 * np.cos(2 * np.pi * 0.0245 * x) + 0.0905 * np.sin(2 * np.pi * 0.0245 * x) + -0.0042 * np.cos(2 * np.pi * 0.0250 * x) + -0.1084 * np.sin(2 * np.pi * 0.0250 * x) + -0.0307 * np.cos(2 * np.pi * 0.0255 * x) + 0.1822 * np.sin(2 * np.pi * 0.0255 * x) + -0.1025 * np.cos(2 * np.pi * 0.0260 * x) + 0.0613 * np.sin(2 * np.pi * 0.0260 * x) + 0.0526 * np.cos(2 * np.pi * 0.0265 * x) + -0.0265 * np.sin(2 * np.pi * 0.0265 * x) + 0.0534 * np.cos(2 * np.pi * 0.0275 * x) + -0.0674 * np.sin(2 * np.pi * 0.0275 * x) + -0.0206 * np.cos(2 * np.pi * 0.0280 * x) + 0.1177 * np.sin(2 * np.pi * 0.0280 * x) + -0.1002 * np.cos(2 * np.pi * 0.0290 * x) + 0.0799 * np.sin(2 * np.pi * 0.0290 * x) + 0.0436 * np.cos(2 * np.pi * 0.0295 * x) + -0.0592 * np.sin(2 * np.pi * 0.0295 * x) + 0.0634 * np.cos(2 * np.pi * 0.0300 * x) + 0.0739 * np.sin(2 * np.pi * 0.0300 * x) + 0.0412 * np.cos(2 * np.pi * 0.0305 * x) + 0.0893 * np.sin(2 * np.pi * 0.0305 * x) + 0.0210 * np.cos(2 * np.pi * 0.0310 * x) + 0.0690 * np.sin(2 * np.pi * 0.0310 * x) + 0.0713 * np.cos(2 * np.pi * 0.0315 * x) + -0.0368 * np.sin(2 * np.pi * 0.0315 * x) + -0.0495 * np.cos(2 * np.pi * 0.0340 * x) + 0.0491 * np.sin(2 * np.pi * 0.0340 * x) + -0.0053 * np.cos(2 * np.pi * 0.0345 * x) + 0.0532 * np.sin(2 * np.pi * 0.0345 * x) + -0.0536 * np.cos(2 * np.pi * 0.0355 * x) + 0.0412 * np.sin(2 * np.pi * 0.0355 * x) + 0.0545 * np.cos(2 * np.pi * 0.0370 * x) + 0.0577 * np.sin(2 * np.pi * 0.0370 * x) + 0.0556 * np.cos(2 * np.pi * 0.0375 * x) + 0.0275 * np.sin(2 * np.pi * 0.0375 * x) + 0.0586 * np.cos(2 * np.pi * 0.0380 * x) + -0.0081 * np.sin(2 * np.pi * 0.0380 * x) + -0.0768 * np.cos(2 * np.pi * 0.0385 * x) + 0.0229 * np.sin(2 * np.pi * 0.0385 * x) + 0.0409 * np.cos(2 * np.pi * 0.0395 * x) + 0.0807 * np.sin(2 * np.pi * 0.0395 * x) + -0.0044 * np.cos(2 * np.pi * 0.0400 * x) + -0.0738 * np.sin(2 * np.pi * 0.0400 * x) + 0.0278 * np.cos(2 * np.pi * 0.0410 * x) + 0.0970 * np.sin(2 * np.pi * 0.0410 * x) + 0.0448 * np.cos(2 * np.pi * 0.0425 * x) + 0.0359 * np.sin(2 * np.pi * 0.0425 * x) + 0.0124 * np.cos(2 * np.pi * 0.0430 * x) + 0.0550 * np.sin(2 * np.pi * 0.0430 * x) + -0.0319 * np.cos(2 * np.pi * 0.0435 * x) + 0.0576 * np.sin(2 * np.pi * 0.0435 * x) + 0.0345 * np.cos(2 * np.pi * 0.0460 * x) + 0.0450 * np.sin(2 * np.pi * 0.0460 * x) + 0.0456 * np.cos(2 * np.pi * 0.0485 * x) + 0.0393 * np.sin(2 * np.pi * 0.0485 * x) + -0.0093 * np.cos(2 * np.pi * 0.0495 * x) + 0.0684 * np.sin(2 * np.pi * 0.0495 * x) + 0.0179 * np.cos(2 * np.pi * 0.0505 * x) + 0.0803 * np.sin(2 * np.pi * 0.0505 * x) + 0.0413 * np.cos(2 * np.pi * 0.0510 * x) + 0.0443 * np.sin(2 * np.pi * 0.0510 * x) + -0.0493 * np.cos(2 * np.pi * 0.0520 * x) + 0.0121 * np.sin(2 * np.pi * 0.0520 * x) + 0.0336 * np.cos(2 * np.pi * 0.0525 * x) + 0.0745 * np.sin(2 * np.pi * 0.0525 * x) + 0.0575 * np.cos(2 * np.pi * 0.0535 * x) + -0.0151 * np.sin(2 * np.pi * 0.0535 * x) + 0.0263 * np.cos(2 * np.pi * 0.0540 * x) + 0.0672 * np.sin(2 * np.pi * 0.0540 * x) + 0.0106 * np.cos(2 * np.pi * 0.0570 * x) + 0.0497 * np.sin(2 * np.pi * 0.0570 * x) + 0.0222 * np.cos(2 * np.pi * 0.0590 * x) + 0.0450 * np.sin(2 * np.pi * 0.0590 * x) + -0.0303 * np.cos(2 * np.pi * 0.0635 * x) + 0.0565 * np.sin(2 * np.pi * 0.0635 * x) + 0.0325 * np.cos(2 * np.pi * 0.0690 * x) + -0.0445 * np.sin(2 * np.pi * 0.0690 * x) + -0.0064 * np.cos(2 * np.pi * 0.0695 * x) + 0.0584 * np.sin(2 * np.pi * 0.0695 * x) + 0.0476 * np.cos(2 * np.pi * 0.0760 * x) + 0.0214 * np.sin(2 * np.pi * 0.0760 * x) + 0.0340 * np.cos(2 * np.pi * 0.0830 * x) + 0.0576 * np.sin(2 * np.pi * 0.0830 * x) + -0.0494 * np.cos(2 * np.pi * 0.0930 * x) + 0.0115 * np.sin(2 * np.pi * 0.0930 * x) + -0.0349 * np.cos(2 * np.pi * 0.0945 * x) + 0.0359 * np.sin(2 * np.pi * 0.0945 * x) + -0.0543 * np.cos(2 * np.pi * 0.0990 * x) + -0.0335 * np.sin(2 * np.pi * 0.0990 * x) + 0.0332 * np.cos(2 * np.pi * 0.1015 * x) + 0.0606 * np.sin(2 * np.pi * 0.1015 * x) + 0.0590 * np.cos(2 * np.pi * 0.1065 * x) + -0.0215 * np.sin(2 * np.pi * 0.1065 * x) + 0.0027 * np.cos(2 * np.pi * 0.1070 * x) + 0.0528 * np.sin(2 * np.pi * 0.1070 * x) + -0.0125 * np.cos(2 * np.pi * 0.1080 * x) + 0.0515 * np.sin(2 * np.pi * 0.1080 * x) + 0.0524 * np.cos(2 * np.pi * 0.1220 * x) + 0.0247 * np.sin(2 * np.pi * 0.1220 * x) + -0.0501 * np.cos(2 * np.pi * 0.1365 * x) + -0.0023 * np.sin(2 * np.pi * 0.1365 * x) + 0.0507 * np.cos(2 * np.pi * 0.1405 * x) + 0.0071 * np.sin(2 * np.pi * 0.1405 * x) + 0.0441 * np.cos(2 * np.pi * 0.2015 * x) + 0.0394 * np.sin(2 * np.pi * 0.2015 * x) + 0.0571 * np.cos(2 * np.pi * 0.2700 * x) + 0.0219 * np.sin(2 * np.pi * 0.2700 * x) + 0.0528 * np.cos(2 * np.pi * 0.3410 * x) + 0.0117 * np.sin(2 * np.pi * 0.3410 * x) + 0.0495 * np.cos(2 * np.pi * 0.3735 * x) + 0.0096 * np.sin(2 * np.pi * 0.3735 * x) + 0.0601 * np.cos(2 * np.pi * 0.4290 * x) + -0.0309 * np.sin(2 * np.pi * 0.4290 * x) + -0.0264 * np.cos(2 * np.pi * 0.4410 * x) + -0.0511 * np.sin(2 * np.pi * 0.4410 * x) + -0.0264 * np.cos(2 * np.pi * -0.4410 * x) + 0.0511 * np.sin(2 * np.pi * -0.4410 * x) + 0.0601 * np.cos(2 * np.pi * -0.4290 * x) + 0.0309 * np.sin(2 * np.pi * -0.4290 * x) + 0.0495 * np.cos(2 * np.pi * -0.3735 * x) + -0.0096 * np.sin(2 * np.pi * -0.3735 * x) + 0.0528 * np.cos(2 * np.pi * -0.3410 * x) + -0.0117 * np.sin(2 * np.pi * -0.3410 * x) + 0.0571 * np.cos(2 * np.pi * -0.2700 * x) + -0.0219 * np.sin(2 * np.pi * -0.2700 * x) + 0.0441 * np.cos(2 * np.pi * -0.2015 * x) + -0.0394 * np.sin(2 * np.pi * -0.2015 * x) + 0.0507 * np.cos(2 * np.pi * -0.1405 * x) + -0.0071 * np.sin(2 * np.pi * -0.1405 * x) + -0.0501 * np.cos(2 * np.pi * -0.1365 * x) + 0.0023 * np.sin(2 * np.pi * -0.1365 * x) + 0.0524 * np.cos(2 * np.pi * -0.1220 * x) + -0.0247 * np.sin(2 * np.pi * -0.1220 * x) + -0.0125 * np.cos(2 * np.pi * -0.1080 * x) + -0.0515 * np.sin(2 * np.pi * -0.1080 * x) + 0.0027 * np.cos(2 * np.pi * -0.1070 * x) + -0.0528 * np.sin(2 * np.pi * -0.1070 * x) + 0.0590 * np.cos(2 * np.pi * -0.1065 * x) + 0.0215 * np.sin(2 * np.pi * -0.1065 * x) + 0.0332 * np.cos(2 * np.pi * -0.1015 * x) + -0.0606 * np.sin(2 * np.pi * -0.1015 * x) + -0.0543 * np.cos(2 * np.pi * -0.0990 * x) + 0.0335 * np.sin(2 * np.pi * -0.0990 * x) + -0.0349 * np.cos(2 * np.pi * -0.0945 * x) + -0.0359 * np.sin(2 * np.pi * -0.0945 * x) + -0.0494 * np.cos(2 * np.pi * -0.0930 * x) + -0.0115 * np.sin(2 * np.pi * -0.0930 * x) + 0.0340 * np.cos(2 * np.pi * -0.0830 * x) + -0.0576 * np.sin(2 * np.pi * -0.0830 * x) + 0.0476 * np.cos(2 * np.pi * -0.0760 * x) + -0.0214 * np.sin(2 * np.pi * -0.0760 * x) + -0.0064 * np.cos(2 * np.pi * -0.0695 * x) + -0.0584 * np.sin(2 * np.pi * -0.0695 * x) + 0.0325 * np.cos(2 * np.pi * -0.0690 * x) + 0.0445 * np.sin(2 * np.pi * -0.0690 * x) + -0.0303 * np.cos(2 * np.pi * -0.0635 * x) + -0.0565 * np.sin(2 * np.pi * -0.0635 * x) + 0.0222 * np.cos(2 * np.pi * -0.0590 * x) + -0.0450 * np.sin(2 * np.pi * -0.0590 * x) + 0.0106 * np.cos(2 * np.pi * -0.0570 * x) + -0.0497 * np.sin(2 * np.pi * -0.0570 * x) + 0.0263 * np.cos(2 * np.pi * -0.0540 * x) + -0.0672 * np.sin(2 * np.pi * -0.0540 * x) + 0.0575 * np.cos(2 * np.pi * -0.0535 * x) + 0.0151 * np.sin(2 * np.pi * -0.0535 * x) + 0.0336 * np.cos(2 * np.pi * -0.0525 * x) + -0.0745 * np.sin(2 * np.pi * -0.0525 * x) + -0.0493 * np.cos(2 * np.pi * -0.0520 * x) + -0.0121 * np.sin(2 * np.pi * -0.0520 * x) + 0.0413 * np.cos(2 * np.pi * -0.0510 * x) + -0.0443 * np.sin(2 * np.pi * -0.0510 * x) + 0.0179 * np.cos(2 * np.pi * -0.0505 * x) + -0.0803 * np.sin(2 * np.pi * -0.0505 * x) + -0.0093 * np.cos(2 * np.pi * -0.0495 * x) + -0.0684 * np.sin(2 * np.pi * -0.0495 * x) + 0.0456 * np.cos(2 * np.pi * -0.0485 * x) + -0.0393 * np.sin(2 * np.pi * -0.0485 * x) + 0.0345 * np.cos(2 * np.pi * -0.0460 * x) + -0.0450 * np.sin(2 * np.pi * -0.0460 * x) + -0.0319 * np.cos(2 * np.pi * -0.0435 * x) + -0.0576 * np.sin(2 * np.pi * -0.0435 * x) + 0.0124 * np.cos(2 * np.pi * -0.0430 * x) + -0.0550 * np.sin(2 * np.pi * -0.0430 * x) + 0.0448 * np.cos(2 * np.pi * -0.0425 * x) + -0.0359 * np.sin(2 * np.pi * -0.0425 * x) + 0.0278 * np.cos(2 * np.pi * -0.0410 * x) + -0.0970 * np.sin(2 * np.pi * -0.0410 * x) + -0.0044 * np.cos(2 * np.pi * -0.0400 * x) + 0.0738 * np.sin(2 * np.pi * -0.0400 * x) + 0.0409 * np.cos(2 * np.pi * -0.0395 * x) + -0.0807 * np.sin(2 * np.pi * -0.0395 * x) + -0.0768 * np.cos(2 * np.pi * -0.0385 * x) + -0.0229 * np.sin(2 * np.pi * -0.0385 * x) + 0.0586 * np.cos(2 * np.pi * -0.0380 * x) + 0.0081 * np.sin(2 * np.pi * -0.0380 * x) + 0.0556 * np.cos(2 * np.pi * -0.0375 * x) + -0.0275 * np.sin(2 * np.pi * -0.0375 * x) + 0.0545 * np.cos(2 * np.pi * -0.0370 * x) + -0.0577 * np.sin(2 * np.pi * -0.0370 * x) + -0.0536 * np.cos(2 * np.pi * -0.0355 * x) + -0.0412 * np.sin(2 * np.pi * -0.0355 * x) + -0.0053 * np.cos(2 * np.pi * -0.0345 * x) + -0.0532 * np.sin(2 * np.pi * -0.0345 * x) + -0.0495 * np.cos(2 * np.pi * -0.0340 * x) + -0.0491 * np.sin(2 * np.pi * -0.0340 * x) + 0.0713 * np.cos(2 * np.pi * -0.0315 * x) + 0.0368 * np.sin(2 * np.pi * -0.0315 * x) + 0.0210 * np.cos(2 * np.pi * -0.0310 * x) + -0.0690 * np.sin(2 * np.pi * -0.0310 * x) + 0.0412 * np.cos(2 * np.pi * -0.0305 * x) + -0.0893 * np.sin(2 * np.pi * -0.0305 * x) + 0.0634 * np.cos(2 * np.pi * -0.0300 * x) + -0.0739 * np.sin(2 * np.pi * -0.0300 * x) + 0.0436 * np.cos(2 * np.pi * -0.0295 * x) + 0.0592 * np.sin(2 * np.pi * -0.0295 * x) + -0.1002 * np.cos(2 * np.pi * -0.0290 * x) + -0.0799 * np.sin(2 * np.pi * -0.0290 * x) + -0.0206 * np.cos(2 * np.pi * -0.0280 * x) + -0.1177 * np.sin(2 * np.pi * -0.0280 * x) + 0.0534 * np.cos(2 * np.pi * -0.0275 * x) + 0.0674 * np.sin(2 * np.pi * -0.0275 * x) + 0.0526 * np.cos(2 * np.pi * -0.0265 * x) + 0.0265 * np.sin(2 * np.pi * -0.0265 * x) + -0.1025 * np.cos(2 * np.pi * -0.0260 * x) + -0.0613 * np.sin(2 * np.pi * -0.0260 * x) + -0.0307 * np.cos(2 * np.pi * -0.0255 * x) + -0.1822 * np.sin(2 * np.pi * -0.0255 * x) + -0.0042 * np.cos(2 * np.pi * -0.0250 * x) + 0.1084 * np.sin(2 * np.pi * -0.0250 * x) + -0.0071 * np.cos(2 * np.pi * -0.0245 * x) + -0.0905 * np.sin(2 * np.pi * -0.0245 * x) + -0.0722 * np.cos(2 * np.pi * -0.0240 * x) + -0.0200 * np.sin(2 * np.pi * -0.0240 * x) + 0.0480 * np.cos(2 * np.pi * -0.0235 * x) + -0.1276 * np.sin(2 * np.pi * -0.0235 * x) + 0.0508 * np.cos(2 * np.pi * -0.0230 * x) + -0.0564 * np.sin(2 * np.pi * -0.0230 * x) + 0.0609 * np.cos(2 * np.pi * -0.0225 * x) + -0.0460 * np.sin(2 * np.pi * -0.0225 * x) + -0.0687 * np.cos(2 * np.pi * -0.0220 * x) + 0.0001 * np.sin(2 * np.pi * -0.0220 * x) + -0.0430 * np.cos(2 * np.pi * -0.0215 * x) + -0.0871 * np.sin(2 * np.pi * -0.0215 * x) + -0.0429 * np.cos(2 * np.pi * -0.0210 * x) + -0.0462 * np.sin(2 * np.pi * -0.0210 * x) + -0.0312 * np.cos(2 * np.pi * -0.0205 * x) + -0.0706 * np.sin(2 * np.pi * -0.0205 * x) + -0.1020 * np.cos(2 * np.pi * -0.0195 * x) + -0.0697 * np.sin(2 * np.pi * -0.0195 * x) + 0.0237 * np.cos(2 * np.pi * -0.0190 * x) + -0.0795 * np.sin(2 * np.pi * -0.0190 * x) + -0.1356 * np.cos(2 * np.pi * -0.0185 * x) + -0.0533 * np.sin(2 * np.pi * -0.0185 * x) + 0.0022 * np.cos(2 * np.pi * -0.0175 * x) + -0.1289 * np.sin(2 * np.pi * -0.0175 * x) + 0.0048 * np.cos(2 * np.pi * -0.0170 * x) + -0.0898 * np.sin(2 * np.pi * -0.0170 * x) + -0.1089 * np.cos(2 * np.pi * -0.0165 * x) + -0.0556 * np.sin(2 * np.pi * -0.0165 * x) + 0.0792 * np.cos(2 * np.pi * -0.0160 * x) + -0.0748 * np.sin(2 * np.pi * -0.0160 * x) + -0.0700 * np.cos(2 * np.pi * -0.0155 * x) + 0.0558 * np.sin(2 * np.pi * -0.0155 * x) + 0.0203 * np.cos(2 * np.pi * -0.0145 * x) + -0.0470 * np.sin(2 * np.pi * -0.0145 * x) + 0.1500 * np.cos(2 * np.pi * -0.0140 * x) + 0.1099 * np.sin(2 * np.pi * -0.0140 * x) + 0.1685 * np.cos(2 * np.pi * -0.0135 * x) + -0.0018 * np.sin(2 * np.pi * -0.0135 * x) + 0.0469 * np.cos(2 * np.pi * -0.0125 * x) + 0.0996 * np.sin(2 * np.pi * -0.0125 * x) + -0.0220 * np.cos(2 * np.pi * -0.0120 * x) + -0.2817 * np.sin(2 * np.pi * -0.0120 * x) + -0.0218 * np.cos(2 * np.pi * -0.0115 * x) + 0.1325 * np.sin(2 * np.pi * -0.0115 * x) + 0.1327 * np.cos(2 * np.pi * -0.0110 * x) + -0.1694 * np.sin(2 * np.pi * -0.0110 * x) + 0.1122 * np.cos(2 * np.pi * -0.0105 * x) + 0.1404 * np.sin(2 * np.pi * -0.0105 * x) + -0.1324 * np.cos(2 * np.pi * -0.0100 * x) + -0.0311 * np.sin(2 * np.pi * -0.0100 * x) + 0.3012 * np.cos(2 * np.pi * -0.0095 * x) + -0.1381 * np.sin(2 * np.pi * -0.0095 * x) + -0.0483 * np.cos(2 * np.pi * -0.0090 * x) + 0.2014 * np.sin(2 * np.pi * -0.0090 * x) + 0.3162 * np.cos(2 * np.pi * -0.0085 * x) + 0.0084 * np.sin(2 * np.pi * -0.0085 * x) + -0.1753 * np.cos(2 * np.pi * -0.0080 * x) + -0.0869 * np.sin(2 * np.pi * -0.0080 * x) + -0.0160 * np.cos(2 * np.pi * -0.0075 * x) + -0.0510 * np.sin(2 * np.pi * -0.0075 * x) + 0.2307 * np.cos(2 * np.pi * -0.0070 * x) + -0.0869 * np.sin(2 * np.pi * -0.0070 * x) + -0.1847 * np.cos(2 * np.pi * -0.0065 * x) + -0.4123 * np.sin(2 * np.pi * -0.0065 * x) + 0.4880 * np.cos(2 * np.pi * -0.0060 * x) + -0.3185 * np.sin(2 * np.pi * -0.0060 * x) + -0.0234 * np.cos(2 * np.pi * -0.0055 * x) + -0.2519 * np.sin(2 * np.pi * -0.0055 * x) + -0.2651 * np.cos(2 * np.pi * -0.0050 * x) + 0.1541 * np.sin(2 * np.pi * -0.0050 * x) + -0.0952 * np.cos(2 * np.pi * -0.0045 * x) + -0.5854 * np.sin(2 * np.pi * -0.0045 * x) + 0.0431 * np.cos(2 * np.pi * -0.0040 * x) + -0.3054 * np.sin(2 * np.pi * -0.0040 * x) + 0.3250 * np.cos(2 * np.pi * -0.0035 * x) + 0.0832 * np.sin(2 * np.pi * -0.0035 * x) + 0.1229 * np.cos(2 * np.pi * -0.0030 * x) + -0.1595 * np.sin(2 * np.pi * -0.0030 * x) + -0.4489 * np.cos(2 * np.pi * -0.0025 * x) + 0.1749 * np.sin(2 * np.pi * -0.0025 * x) + 0.4635 * np.cos(2 * np.pi * -0.0020 * x) + -0.5498 * np.sin(2 * np.pi * -0.0020 * x) + -1.1696 * np.cos(2 * np.pi * -0.0015 * x) + 0.4259 * np.sin(2 * np.pi * -0.0015 * x) + 1.9269 * np.cos(2 * np.pi * -0.0010 * x) + -1.4737 * np.sin(2 * np.pi * -0.0010 * x) + 3.1368 * np.cos(2 * np.pi * -0.0005 * x) + -2.2647 * np.sin(2 * np.pi * -0.0005 * x)


class Persistence_Data(object):
    def __init__(self, current_kelp_ind, trade_frequency_count):
        self.current_kelp_ind  = current_kelp_ind 
        self.trade_frequency_count = trade_frequency_count

